//
// Интерфейс "ядра ОС" для планировщика задач и реализации семафоров.
//
#pragma once

namespace OS
{

/// Контекст исполнения задачи. Используется для переключения.
typedef void* Context;


/// Состояния задачи.
enum TaskState {
	Ready,      ///< Готова к выполнению.
	Blocked,    ///< Заблокирована.
	Terminated  ///< Завершила работу.
};

/// Идентификатор задачи --- это целое число.
typedef  unsigned long long int  TaskID;

/// Задача с точки зрения "ядра".
struct Task {
	TaskID id;        ///< Уникальный идентификатор задачи (для удобства).
	Context context;  ///< Сохраненный контест исполнения задачи.
	TaskState state;  ///< Состояние задачи.
	// TODO:
	//    Можно расширить описание задачи, например, приоритетом.
};


/// Возвращает указатель на задачу, которая исполнялась до перехода в ядро.
Task* get_current_task();

/// Передает управление "ядру".
void switch_to_kernel();

/// Передает управление задаче.  Не нужна для выполнения задания.
void switch_to(Task* task);

} // namespace OS
