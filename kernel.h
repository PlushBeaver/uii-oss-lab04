//
// Интерфейс "ядра ОС" для планировщика задач и реализации семафоров.
//
#pragma once

namespace OS
{

/// Контекст исполнения задачи. Используется для переключения.
typedef void* Context;


/// Состояния задачи.
enum TaskState {
    Ready,      ///< Готова к выполнению.
    Blocked,    ///< Заблокирована.
    Terminated  ///< Завершила работу.
};

/// Идентификатор задачи --- это целое число.
typedef  unsigned long long int  TaskID;

/// Задача с точки зрения "ядра".
struct Task {
    TaskID id;        ///< Уникальный идентификатор задачи (для удобства).
    Context context;  ///< Сохраненный контест исполнения задачи.
    TaskState state;  ///< Состояние задачи.
    // TODO:
    //    Можно расширить описание задачи, например, приоритетом.
};


/// Возвращает указатель на текующую задачу.
Task* get_current_task();

/// Удаляет задачу из таблицы задач "ядра".
void remove_task(Task* task);

/// Возвращает контекст "ядра".
Context get_kernel_context();

/// Переключает контекст на заданный.
void switch_to(Context context);

} // namespace OS
